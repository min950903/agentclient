package com.transfer.video.vtms.agent;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Properties;

public class AgentServer {
	private static AgentMapper agentMapper = new AgentMapperImpl();

	public static void main(String[] args) {
		Properties properties = new Properties();

		Socket client = null;
		try (ServerSocket server = new ServerSocket(80)) {
			while (true) {
				client = server.accept();
				
				File propertiFilePath = new File("C:\\agent\\agent.properties");
				properties.load(new FileInputStream(propertiFilePath));
				
				Files.createDirectories(Paths.get(properties.getProperty("path.video")));
				
				String videoName = writeVideoInfo(client, properties.getProperty("path.video"));
				
				if (videoName != null ) {
					String quitCmd = properties.getProperty("cmd.taskkill");
					Process process = Runtime.getRuntime().exec(quitCmd);
					
					Thread.sleep(1000);
					process.destroy();
					
					deleteFile(new File(properties.getProperty("path.video")));

					String playCmd = properties.getProperty("cmd.playvideo") + properties.getProperty("path.video") + videoName;
					process = Runtime.getRuntime().exec(playCmd);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	// 수신 정보 가져오기
	private static String[] getReceiveInfo(String Receiveinfo) {
		String[] infoArray = new String[2];
		infoArray[0] = Receiveinfo.substring(0,19);
		infoArray[1] = Receiveinfo.substring(20);
		return infoArray;
	}
	
	// 영상 파일을 읽어와 저장
	private static String writeVideoInfo(Socket client, String path) {
		InputStream receiveInfo = null;
		OutputStream videoFile = null;
		
		boolean isCatchAccessKey = false;
		String videoName = null;

		try {
			receiveInfo = client.getInputStream();
			
			byte[] buffer = new byte[1000];
			int readCount = 0;
			while ((readCount = receiveInfo.read(buffer)) != -1) {
				if (!isCatchAccessKey) {
					if(readCount < 23) { break; }
					
					String[] infoArray = getReceiveInfo(new String(Arrays.copyOf(buffer, 23)));
					
					if (!agentMapper.selectAccessKey().equals(infoArray[0])) { break; }
					videoName = System.currentTimeMillis() + infoArray[1];
					videoFile = new FileOutputStream(path + "\\" + videoName);
					
					videoFile.write(buffer, 23, (readCount - 23));

					isCatchAccessKey = true;
				} else { videoFile.write(buffer, 0, readCount); }
			}
			
			if(isCatchAccessKey == true) {
				videoFile.flush();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (videoFile != null) { videoFile.close(); }
				if (receiveInfo != null) { receiveInfo.close(); }
				if (client != null) { client.close(); }
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return videoName;
	}
	
	// 디렉토리 내 파일 삭제
	private static void deleteFile(File videoFile) {
		if (videoFile.exists()) {
			File[] files = videoFile.listFiles();
			
			for (int i = 0; i < files.length - 1; i++) {
				files[i].delete();
			}
		}
	}
	
}
